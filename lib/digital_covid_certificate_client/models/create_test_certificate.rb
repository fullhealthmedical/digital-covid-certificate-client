=begin
#Negative test certificate API

#API for generating negative certificates for covid tests

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module DigitalCovidCertificateClient
  class CreateTestCertificate
    # Surname(s) of person tested
    attr_accessor :surname

    # The forename(s) of the person addressed in certificate
    attr_accessor :forename

    # Date of birth of person in certificate, ISO 8601 range
    attr_accessor :date_of_birth

    # The type of test performed<table> <tr> <th>Code</th> <th>Name</th> </tr><tr><td>LP6464-4</td><td>Nucleic acid amplification with probe detection</td></tr><tr><td>LP217198-3</td><td>Rapid immunoassay</td></tr></table>
    attr_accessor :test_type

    # NAA test name
    attr_accessor :naa_test_name

    # RAT Test name and manufacturer<table> <tr> <th>Code</th> <th>Name</th> </tr><tr><td>1833</td><td>AAZ-LMB, COVID-VIRO</td></tr><tr><td>1232</td><td>Abbott Rapid Diagnostics, Panbio COVID-19 Ag Rapid Test</td></tr><tr><td>1468</td><td>ACON Laboratories, Inc, Flowflex SARS-CoV-2 Antigen rapid test</td></tr><tr><td>1304</td><td>AMEDA Labordiagnostik GmbH, AMP Rapid Test SARS-CoV-2 Ag</td></tr><tr><td>1822</td><td>Anbio (Xiamen) Biotechnology Co., Ltd, Rapid COVID-19 Antigen Test(Colloidal Gold)</td></tr><tr><td>1815</td><td>Anhui Deep Blue Medical Technology Co., Ltd, COVID-19 (SARS-CoV-2) Antigen Test Kit (Colloidal Gold) - Nasal Swab</td></tr><tr><td>1736</td><td>Anhui Deep Blue Medical Technology Co., Ltd, COVID-19 (SARS-CoV-2) Antigen Test Kit(Colloidal Gold)</td></tr><tr><td>768</td><td>ArcDia International Ltd, mariPOC SARS-CoV-2</td></tr><tr><td>1654</td><td>Asan Pharmaceutical CO., LTD, Asan Easy Test COVID-19 Ag</td></tr><tr><td>2010</td><td>Atlas Link Technology Co., Ltd., NOVA Test® SARS-CoV-2 Antigen Rapid Test Kit (Colloidal Gold Immunochromatography)</td></tr><tr><td>1906</td><td>Azure Biotech Inc, COVID-19 Antigen Rapid Test Device</td></tr><tr><td>1870</td><td>Beijing Hotgen Biotech Co., Ltd, Novel Coronavirus 2019-nCoV Antigen Test (Colloidal Gold)</td></tr><tr><td>1331</td><td>Beijing Lepu Medical Technology Co., Ltd, SARS-CoV-2 Antigen Rapid Test Kit</td></tr><tr><td>1484</td><td>Beijing Wantai Biological Pharmacy Enterprise Co., Ltd, Wantai SARS-CoV-2 Ag Rapid Test (FIA)</td></tr><tr><td>1223</td><td>BIOSYNEX S.A., BIOSYNEX COVID-19 Ag BSS</td></tr><tr><td>1236</td><td>BTNX Inc, Rapid Response COVID-19 Antigen Rapid Test</td></tr><tr><td>1173</td><td>CerTest Biotec, CerTest SARS-CoV-2 Card test</td></tr><tr><td>1919</td><td>Core Technology Co., Ltd, Coretests COVID-19 Ag Test</td></tr><tr><td>1225</td><td>DDS DIAGNOSTIC, Test Rapid Covid-19 Antigen (tampon nazofaringian)</td></tr><tr><td>1375</td><td>DIALAB GmbH, DIAQUICK COVID-19 Ag Cassette</td></tr><tr><td>1244</td><td>GenBody, Inc, Genbody COVID-19 Ag Test</td></tr><tr><td>1253</td><td>GenSure Biotech Inc, GenSure COVID-19 Antigen Rapid Kit (REF: P2004)</td></tr><tr><td>1144</td><td>Green Cross Medical Science Corp., GENEDIA W COVID-19 Ag</td></tr><tr><td>1747</td><td>Guangdong Hecin Scientific, Inc., 2019-nCoV Antigen Test Kit (colloidal gold method)</td></tr><tr><td>1360</td><td>Guangdong Wesail Biotech Co., Ltd, COVID-19 Ag Test Kit</td></tr><tr><td>1437</td><td>Guangzhou Wondfo Biotech Co., Ltd, Wondfo 2019-nCoV Antigen Test (Lateral Flow Method)</td></tr><tr><td>1256</td><td>Hangzhou AllTest Biotech Co., Ltd, COVID-19 and Influenza A+B Antigen Combo Rapid Test</td></tr><tr><td>1363</td><td>Hangzhou Clongene Biotech Co., Ltd, Covid-19 Antigen Rapid Test Kit</td></tr><tr><td>1365</td><td>Hangzhou Clongene Biotech Co., Ltd, COVID-19/Influenza A+B Antigen Combo Rapid Test</td></tr><tr><td>1844</td><td>Hangzhou Immuno Biotech Co.,Ltd, Immunobio SARS-CoV-2 Antigen ANTERIOR NASAL Rapid Test Kit (minimal invasive)</td></tr><tr><td>1215</td><td>Hangzhou Laihe Biotech Co., Ltd, LYHER Novel Coronavirus (COVID-19) Antigen Test Kit(Colloidal Gold)</td></tr><tr><td>1392</td><td>Hangzhou Testsea Biotechnology Co., Ltd, COVID-19 Antigen Test Cassette</td></tr><tr><td>1767</td><td>Healgen Scientific, Coronavirus Ag Rapid Test Cassette</td></tr><tr><td>1263</td><td>Humasis, Humasis COVID-19 Ag Test</td></tr><tr><td>1333</td><td>Joinstar Biomedical Technology Co., Ltd, COVID-19 Rapid Antigen Test (Colloidal Gold)</td></tr><tr><td>1764</td><td>JOYSBIO (Tianjin) Biotechnology Co., Ltd, SARS-CoV-2 Antigen Rapid Test Kit (Colloidal Gold)</td></tr><tr><td>1266</td><td>Labnovation Technologies Inc, SARS-CoV-2 Antigen Rapid Test Kit</td></tr><tr><td>1267</td><td>LumiQuick Diagnostics Inc, QuickProfile COVID-19 Antigen Test</td></tr><tr><td>1268</td><td>LumiraDX, LumiraDx SARS-CoV-2 Ag Test</td></tr><tr><td>1180</td><td>MEDsan GmbH, MEDsan SARS-CoV-2 Antigen Rapid Test</td></tr><tr><td>1190</td><td>möLab, COVID-19 Rapid Antigen Test</td></tr><tr><td>1481</td><td>MP Biomedicals, Rapid SARS-CoV-2 Antigen Test Card</td></tr><tr><td>1162</td><td>Nal von minden GmbH, NADAL COVID-19 Ag Test</td></tr><tr><td>1420</td><td>NanoEntek, FREND COVID-19 Ag</td></tr><tr><td>1199</td><td>Oncosem Onkolojik Sistemler San. ve Tic. A.S., CAT</td></tr><tr><td>308</td><td>PCL Inc, PCL COVID19 Ag Rapid FIA</td></tr><tr><td>1271</td><td>Precision Biosensor, Inc, Exdia COVID-19 Ag</td></tr><tr><td>1341</td><td>Qingdao Hightop Biotech Co., Ltd, SARS-CoV-2 Antigen Rapid Test (Immunochromatography)</td></tr><tr><td>1097</td><td>Quidel Corporation, Sofia SARS Antigen FIA</td></tr><tr><td>1606</td><td>RapiGEN Inc, BIOCREDIT COVID-19 Ag - SARS-CoV 2 Antigen test</td></tr><tr><td>1604</td><td>Roche (SD BIOSENSOR), SARS-CoV-2 Antigen Rapid Test</td></tr><tr><td>1489</td><td>Safecare Biotech (Hangzhou) Co. Ltd, COVID-19 Antigen Rapid Test Kit (Swab)</td></tr><tr><td>1490</td><td>Safecare Biotech (Hangzhou) Co. Ltd, Multi-Respiratory Virus Antigen Test Kit(Swab)  (Influenza A+B/ COVID-19)</td></tr><tr><td>344</td><td>SD BIOSENSOR Inc, STANDARD F COVID-19 Ag FIA</td></tr><tr><td>345</td><td>SD BIOSENSOR Inc, STANDARD Q COVID-19 Ag Test</td></tr><tr><td>1319</td><td>SGA Medikal, V-Chek SARS-CoV-2 Ag Rapid Test Kit (Colloidal Gold)</td></tr><tr><td>2017</td><td>Shenzhen Ultra-Diagnostics Biotec.Co.,Ltd, SARS-CoV-2 Antigen Test Kit</td></tr><tr><td>1769</td><td>Shenzhen Watmind Medical Co., Ltd, SARS-CoV-2 Ag Diagnostic Test Kit (Colloidal Gold)</td></tr><tr><td>1574</td><td>Shenzhen Zhenrui Biotechnology Co., Ltd, Zhenrui ®COVID-19 Antigen Test Cassette</td></tr><tr><td>1218</td><td>Siemens Healthineers, CLINITEST Rapid Covid-19 Antigen Test</td></tr><tr><td>1114</td><td>Sugentech, Inc, SGTi-flex COVID-19 Ag</td></tr><tr><td>1466</td><td>TODA PHARMA, TODA CORONADIAG Ag</td></tr><tr><td>1934</td><td>Tody Laboratories Int., Coronavirus (SARS-CoV 2) Antigen - Oral Fluid</td></tr><tr><td>1443</td><td>Vitrosens Biotechnology Co., Ltd, RapidFor SARS-CoV-2 Rapid Ag Test</td></tr><tr><td>1246</td><td>VivaChek Biotech (Hangzhou) Co., Ltd, Vivadiag SARS CoV 2 Ag Rapid Test</td></tr><tr><td>1763</td><td>Xiamen AmonMed Biotechnology Co., Ltd, COVID-19 Antigen Rapid Test Kit (Colloidal Gold)</td></tr><tr><td>1278</td><td>Xiamen Boson Biotech Co. Ltd, Rapid SARS-CoV-2 Antigen Test Card</td></tr><tr><td>1456</td><td>Xiamen Wiz Biotech Co., Ltd, SARS-CoV-2 Antigen Rapid Test</td></tr><tr><td>1884</td><td>Xiamen Wiz Biotech Co., Ltd, SARS-CoV-2 Antigen Rapid Test (Colloidal Gold)</td></tr><tr><td>1296</td><td>Zhejiang Anji Saianfu Biotech Co., Ltd, AndLucky COVID-19 Antigen Rapid Test</td></tr><tr><td>1295</td><td>Zhejiang Anji Saianfu Biotech Co., Ltd, reOpenTest COVID-19 Antigen Rapid Test</td></tr><tr><td>1343</td><td>Zhezhiang Orient Gene Biotech Co., Ltd, Coronavirus Ag Rapid Test Cassette (Swab)</td></tr></table>
    attr_accessor :test_manufacturer

    # Datetime of sample collection
    attr_accessor :sample_collection_time

    # Centre test was conducted
    attr_accessor :test_centre

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'surname' => :'surname',
        :'forename' => :'forename',
        :'date_of_birth' => :'date_of_birth',
        :'test_type' => :'test_type',
        :'naa_test_name' => :'naa_test_name',
        :'test_manufacturer' => :'test_manufacturer',
        :'sample_collection_time' => :'sample_collection_time',
        :'test_centre' => :'test_centre'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'surname' => :'String',
        :'forename' => :'String',
        :'date_of_birth' => :'String',
        :'test_type' => :'String',
        :'naa_test_name' => :'String',
        :'test_manufacturer' => :'String',
        :'sample_collection_time' => :'Time',
        :'test_centre' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DigitalCovidCertificateClient::CreateTestCertificate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DigitalCovidCertificateClient::CreateTestCertificate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'surname')
        self.surname = attributes[:'surname']
      end

      if attributes.key?(:'forename')
        self.forename = attributes[:'forename']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'test_type')
        self.test_type = attributes[:'test_type']
      end

      if attributes.key?(:'naa_test_name')
        self.naa_test_name = attributes[:'naa_test_name']
      end

      if attributes.key?(:'test_manufacturer')
        self.test_manufacturer = attributes[:'test_manufacturer']
      end

      if attributes.key?(:'sample_collection_time')
        self.sample_collection_time = attributes[:'sample_collection_time']
      end

      if attributes.key?(:'test_centre')
        self.test_centre = attributes[:'test_centre']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @surname.nil?
        invalid_properties.push('invalid value for "surname", surname cannot be nil.')
      end

      if @forename.nil?
        invalid_properties.push('invalid value for "forename", forename cannot be nil.')
      end

      if @date_of_birth.nil?
        invalid_properties.push('invalid value for "date_of_birth", date_of_birth cannot be nil.')
      end

      pattern = Regexp.new(/^((19|20)\d\d(-\d\d){0,2}){0,1}$/)
      if @date_of_birth !~ pattern
        invalid_properties.push("invalid value for \"date_of_birth\", must conform to the pattern #{pattern}.")
      end

      if @test_type.nil?
        invalid_properties.push('invalid value for "test_type", test_type cannot be nil.')
      end

      if @test_type.to_s.length > 80
        invalid_properties.push('invalid value for "test_type", the character length must be smaller than or equal to 80.')
      end

      if @naa_test_name.nil?
        invalid_properties.push('invalid value for "naa_test_name", naa_test_name cannot be nil.')
      end

      if @naa_test_name.to_s.length > 80
        invalid_properties.push('invalid value for "naa_test_name", the character length must be smaller than or equal to 80.')
      end

      if @test_manufacturer.nil?
        invalid_properties.push('invalid value for "test_manufacturer", test_manufacturer cannot be nil.')
      end

      if @test_manufacturer.to_s.length > 80
        invalid_properties.push('invalid value for "test_manufacturer", the character length must be smaller than or equal to 80.')
      end

      if @sample_collection_time.nil?
        invalid_properties.push('invalid value for "sample_collection_time", sample_collection_time cannot be nil.')
      end

      if @test_centre.nil?
        invalid_properties.push('invalid value for "test_centre", test_centre cannot be nil.')
      end

      if @test_centre.to_s.length > 80
        invalid_properties.push('invalid value for "test_centre", the character length must be smaller than or equal to 80.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @surname.nil?
      return false if @forename.nil?
      return false if @date_of_birth.nil?
      return false if @date_of_birth !~ Regexp.new(/^((19|20)\d\d(-\d\d){0,2}){0,1}$/)
      return false if @test_type.nil?
      return false if @test_type.to_s.length > 80
      return false if @naa_test_name.nil?
      return false if @naa_test_name.to_s.length > 80
      return false if @test_manufacturer.nil?
      return false if @test_manufacturer.to_s.length > 80
      return false if @sample_collection_time.nil?
      return false if @test_centre.nil?
      return false if @test_centre.to_s.length > 80
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] date_of_birth Value to be assigned
    def date_of_birth=(date_of_birth)
      if date_of_birth.nil?
        fail ArgumentError, 'date_of_birth cannot be nil'
      end

      pattern = Regexp.new(/^((19|20)\d\d(-\d\d){0,2}){0,1}$/)
      if date_of_birth !~ pattern
        fail ArgumentError, "invalid value for \"date_of_birth\", must conform to the pattern #{pattern}."
      end

      @date_of_birth = date_of_birth
    end

    # Custom attribute writer method with validation
    # @param [Object] test_type Value to be assigned
    def test_type=(test_type)
      if test_type.nil?
        fail ArgumentError, 'test_type cannot be nil'
      end

      if test_type.to_s.length > 80
        fail ArgumentError, 'invalid value for "test_type", the character length must be smaller than or equal to 80.'
      end

      @test_type = test_type
    end

    # Custom attribute writer method with validation
    # @param [Object] naa_test_name Value to be assigned
    def naa_test_name=(naa_test_name)
      if naa_test_name.nil?
        fail ArgumentError, 'naa_test_name cannot be nil'
      end

      if naa_test_name.to_s.length > 80
        fail ArgumentError, 'invalid value for "naa_test_name", the character length must be smaller than or equal to 80.'
      end

      @naa_test_name = naa_test_name
    end

    # Custom attribute writer method with validation
    # @param [Object] test_manufacturer Value to be assigned
    def test_manufacturer=(test_manufacturer)
      if test_manufacturer.nil?
        fail ArgumentError, 'test_manufacturer cannot be nil'
      end

      if test_manufacturer.to_s.length > 80
        fail ArgumentError, 'invalid value for "test_manufacturer", the character length must be smaller than or equal to 80.'
      end

      @test_manufacturer = test_manufacturer
    end

    # Custom attribute writer method with validation
    # @param [Object] test_centre Value to be assigned
    def test_centre=(test_centre)
      if test_centre.nil?
        fail ArgumentError, 'test_centre cannot be nil'
      end

      if test_centre.to_s.length > 80
        fail ArgumentError, 'invalid value for "test_centre", the character length must be smaller than or equal to 80.'
      end

      @test_centre = test_centre
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          surname == o.surname &&
          forename == o.forename &&
          date_of_birth == o.date_of_birth &&
          test_type == o.test_type &&
          naa_test_name == o.naa_test_name &&
          test_manufacturer == o.test_manufacturer &&
          sample_collection_time == o.sample_collection_time &&
          test_centre == o.test_centre
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [surname, forename, date_of_birth, test_type, naa_test_name, test_manufacturer, sample_collection_time, test_centre].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DigitalCovidCertificateClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
